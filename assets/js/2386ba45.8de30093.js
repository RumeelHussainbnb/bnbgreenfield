"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[2202],{33145:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=s(87462),r=(s(67294),s(3905));const i={title:"Metadata",order:13},n="Metadata",o={unversionedId:"guide/storage-provider/services/metadata",id:"guide/storage-provider/services/metadata",title:"Metadata",description:"Metadata service is to supply better query service for the Greenfield network. Users can interact with SP for some complex query services.",source:"@site/docs/guide/storage-provider/services/metadata.md",sourceDirName:"guide/storage-provider/services",slug:"/guide/storage-provider/services/metadata",permalink:"/bnbgreenfield/docs/guide/storage-provider/services/metadata",draft:!1,editUrl:"https://github.com/RumeelHussainbnb/bnbgreenfield-docs/docs/guide/storage-provider/services/metadata.md",tags:[],version:"current",frontMatter:{title:"Metadata",order:13},sidebar:"guideSidebar",previous:{title:"BSDB",permalink:"/bnbgreenfield/docs/guide/storage-provider/services/bsdb"},next:{title:"Block Syncer",permalink:"/bnbgreenfield/docs/guide/storage-provider/services/blocksyncer"}},c={},d=[{value:"Role",id:"role",level:2},{value:"Scalability",id:"scalability",level:2},{value:"Key Workflow",id:"key-workflow",level:2},{value:"Get User&#39;s Own Buckets",id:"get-users-own-buckets",level:3},{value:"Message",id:"message",level:2},{value:"List Object By Bucket Name",id:"list-object-by-bucket-name",level:3},{value:"Message",id:"message-1",level:2}],l={toc:d};function u(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"metadata"},"Metadata"),(0,r.kt)("p",null,"Metadata service is to supply better query service for the Greenfield network. Users can interact with SP for some complex query services.\nSome interfaces can be costly to implement on the chain or can cause significant latency.\nMetadata service is designed to implement the corresponding interface under the chain and provide it to the SP to achieve high performance and low latency.\nThe events' data are optimally stored by the block syncer and provided to the metadata.\nAlso, it provides additional extensions such as Pagination, Sort Key, and filtering. etc."),(0,r.kt)("h2",{id:"role"},"Role"),(0,r.kt)("p",null,"Sync all the Greenfield chain data to the distributed stores, and offers the read RPC\nrequests for chain data(in addition to payload). SP service will query the info, E.g.\npermission, ListBucket, ListObject, etc. It will reduce the pressure on the Greenfield chain."),(0,r.kt)("h2",{id:"scalability"},"Scalability"),(0,r.kt)("p",null,"At present, the main role of metadata is to provide better scalability, and two main points are considered in the process of interface development:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"the creation of interfaces that are not currently supported on the chain"),(0,r.kt)("li",{parentName:"ol"},"metadata can provide better performance and low latency interfaces compared to those on the chain")),(0,r.kt)("h2",{id:"key-workflow"},"Key Workflow"),(0,r.kt)("h3",{id:"get-users-own-buckets"},"Get User's Own Buckets"),(0,r.kt)("p",null,"Metadata service Receives the GetUserBucketsRequest request from the Gateway that has been authenticated. The service\nconverts the data format inside BSDB to the response type of the corresponding interface, and\nreturns GetUserBucketsResponse, which retrieves all bucket information from the BS DB."),(0,r.kt)("h2",{id:"message"},"Message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"// GetUserBucketsRequest is request type for the GetUserBuckets RPC method.\nmessage GetUserBucketsRequest {\n  // account_id is the account address of user\n  string account_id = 1;\n}\n// GetUserBucketsResponse is response type for the GetUserBuckets RPC method.\nmessage GetUserBucketsResponse {\n  // buckets defines the list of bucket\n  repeated Bucket buckets = 1;\n}\n")),(0,r.kt)("h3",{id:"list-object-by-bucket-name"},"List Object By Bucket Name"),(0,r.kt)("p",null,"Metadata Service receives the ListObjectsByBucketNameRequest request from Gateway that has been authenticated.\nThe service converts the data format inside BSDB to the response type of the corresponding interface, and\nreturns ListObjectsByBucketNameResponse, which retrieves all object information related to the bucket from the BS DB."),(0,r.kt)("h2",{id:"message-1"},"Message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"// ListObjectsByBucketNameRequest is request type for the ListObjectsByBucketName RPC method\nmessage ListObjectsByBucketNameRequest {\n  // bucket_name is the name of the bucket\n  string bucket_name = 1;\n  // account_id is the account address of user\n  string account_id = 2;\n}\n// ListObjectsByBucketNameResponse is response type for the ListObjectsByBucketName RPC method.\nmessage ListObjectsByBucketNameResponse {\n  // objects defines the list of object\n  repeated Object objects = 1;\n}\n")))}u.isMDXComponent=!0}}]);