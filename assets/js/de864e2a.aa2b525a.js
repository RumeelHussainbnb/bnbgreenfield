"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[1981],{79494:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>n,metadata:()=>o,toc:()=>d});var a=t(87462),i=(t(67294),t(3905));const n={title:"Manager",dir:{order:1},order:1},s="Manager",o={unversionedId:"guide/storage-provider/services/manager",id:"guide/storage-provider/services/manager",title:"Manager",description:"The Manager module is responsible for the management work within the SP.",source:"@site/docs/guide/storage-provider/services/manager.md",sourceDirName:"guide/storage-provider/services",slug:"/guide/storage-provider/services/manager",permalink:"/bnbgreenfield-docs/docs/guide/storage-provider/services/manager",draft:!1,editUrl:"https://github.com/RumeelHussainbnb/bnbgreenfield-docs/docs/guide/storage-provider/services/manager.md",tags:[],version:"current",frontMatter:{title:"Manager",dir:{order:1},order:1},sidebar:"guideSidebar",previous:{title:"Architecture",permalink:"/bnbgreenfield-docs/docs/guide/storage-provider/introduction/architecture"},next:{title:"P2P",permalink:"/bnbgreenfield-docs/docs/guide/storage-provider/services/p2p"}},l={},d=[{value:"Overview",id:"overview",level:2},{value:"SP Meta Refresher",id:"sp-meta-refresher",level:3},{value:"Config Manager",id:"config-manager",level:3},{value:"Task Scheduler",id:"task-scheduler",level:3},{value:"Service Register",id:"service-register",level:3},{value:"Protocol",id:"protocol",level:2},{value:"SP DB Interface",id:"sp-db-interface",level:3}],c={toc:d};function g(e){let{components:r,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"manager"},"Manager"),(0,i.kt)("p",null,"The Manager module is responsible for the management work within the SP."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"manager-architecture",src:t(37058).Z,width:"932",height:"578"})),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("i",null,"Manager Architecture")),(0,i.kt)("h3",{id:"sp-meta-refresher"},"SP Meta Refresher"),(0,i.kt)("p",null,"It is responsible for periodically fetching the metadata from the chain to the internal database,\nand other modules can directly use the metadata in the database. Currently mainly includes storage\nparameters and the SP list."),(0,i.kt)("h3",{id:"config-manager"},"Config Manager"),(0,i.kt)("p",null,"In the future, it will be used as the internal configuration manager of the SP to facilitate the\nunified update and distribution of the configuration information of the SP."),(0,i.kt)("h3",{id:"task-scheduler"},"Task Scheduler"),(0,i.kt)("p",null,"In the future, it will be used as a task scheduler inside the SP, including background replicate\ntasks and GC tasks. It also performs fine-grained management of tasks, including task flow control,\nfail over, etc."),(0,i.kt)("h3",{id:"service-register"},"Service Register"),(0,i.kt)("p",null,"In the future, the SP internal microservice register will facilitate unified management of all\nmicroservices. It can quickly monitor the service quality of each microservice."),(0,i.kt)("h2",{id:"protocol"},"Protocol"),(0,i.kt)("h3",{id:"sp-db-interface"},"SP DB Interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},"// SPInfo interface\ntype SPInfo interface {\n    // UpdateAllSp update all sp info, delete old sp info\n    UpdateAllSp(spList []*sptypes.StorageProvider) error\n    // SetOwnSpInfo set(maybe overwrite) own sp info\n    SetOwnSpInfo(sp *sptypes.StorageProvider) error\n}\n\n// StorageParam interface\ntype StorageParam interface {\n    // SetStorageParams set(maybe overwrite) storage params\n    SetStorageParams(params *storagetypes.Params) error\n}\n")))}g.isMDXComponent=!0},37058:(e,r,t)=>{t.d(r,{Z:()=>a});const a=t.p+"assets/images/08-SP-Manager-cfe012783ae750095ee51107cfbea09f.jpg"}}]);