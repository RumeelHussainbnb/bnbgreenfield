"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[7129],{68671:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>u,default:()=>T,frontMatter:()=>p,metadata:()=>y,toc:()=>h});var s=a(87462),n=(a(67294),a(3905)),i=a(26389),r=a(94891),c=a(75190),l=a(47507),o=a(24310),m=a(63303),d=(a(75035),a(85162));const p={id:"dynamic-balance",title:"Queries a list of DynamicBalance items.",description:"Queries a list of DynamicBalance items.",sidebar_label:"DynamicBalance",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"DynamicBalance",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{dynamic_balance:{type:"string"},stream_record:{type:"object",properties:{account:{type:"string",title:"account address"},crud_timestamp:{type:"string",format:"int64",title:"latest update timestamp of the stream record"},netflow_rate:{type:"string",description:"The per-second rate that an account's balance is changing.\nIt is the sum of the account's inbound and outbound flow rates."},static_balance:{type:"string",description:"The balance of the stream account at the latest CRUD timestamp."},buffer_balance:{type:"string",title:"reserved balance of the stream account\nIf the netflow rate is negative, the reserved balance is `netflow_rate * reserve_time`"},lock_balance:{type:"string",title:"the locked balance of the stream account after it puts a new object and before the object is sealed"},status:{title:"the status of the stream account",type:"string",enum:["STREAM_ACCOUNT_STATUS_ACTIVE","STREAM_ACCOUNT_STATUS_FROZEN"],default:"STREAM_ACCOUNT_STATUS_ACTIVE",description:"- STREAM_ACCOUNT_STATUS_ACTIVE: STREAM_ACCOUNT_STATUS_ACTIVE defines the active status of a stream account.\n - STREAM_ACCOUNT_STATUS_FROZEN: STREAM_ACCOUNT_STATUS_FROZEN defines the frozen status of a stream account.\nA frozen stream account cannot be used as payment address for buckets.\nIt can be unfrozen by depositing more BNB to the stream account."},settle_timestamp:{type:"string",format:"int64",title:"the unix timestamp when the stream account will be settled"},out_flows:{type:"array",items:{type:"object",properties:{to_address:{type:"string",title:"stream account address who receives the flow, usually SP(service provider)"},rate:{type:"string",title:"flow rate"}},title:"OutFlow defines the accumulative outflow stream rate in BNB\nfrom a stream account to a Storage Provider"},title:"the accumulated outflow rates of the stream account"}},title:"Stream Payment Record of a stream account"},current_timestamp:{type:"string",format:"int64"}}}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string"},value:{type:"string",format:"byte"}}}}}}}}}},parameters:[{name:"account",in:"path",required:!0,schema:{type:"string"}}],tags:["Query"],description:"Queries a list of DynamicBalance items.",method:"get",path:"/greenfield/payment/dynamic_balance/{account}",info:{title:"Greenfield - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"Queries a list of DynamicBalance items.",description:{type:"text/plain"},url:{path:["greenfield","payment","dynamic_balance",":account"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) ",type:"text/plain"},type:"any",value:"",key:"account"}]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/greenfield-api/greenfield-grpc-gateway-docs",custom_edit_url:null},u=void 0,y={unversionedId:"greenfield-api/dynamic-balance",id:"greenfield-api/dynamic-balance",title:"Queries a list of DynamicBalance items.",description:"Queries a list of DynamicBalance items.",source:"@site/docs/greenfield-api/dynamic-balance.api.mdx",sourceDirName:"greenfield-api",slug:"/greenfield-api/dynamic-balance",permalink:"/bnbgreenfield-docs/docs/greenfield-api/dynamic-balance",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"dynamic-balance",title:"Queries a list of DynamicBalance items.",description:"Queries a list of DynamicBalance items.",sidebar_label:"DynamicBalance",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"DynamicBalance",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{dynamic_balance:{type:"string"},stream_record:{type:"object",properties:{account:{type:"string",title:"account address"},crud_timestamp:{type:"string",format:"int64",title:"latest update timestamp of the stream record"},netflow_rate:{type:"string",description:"The per-second rate that an account's balance is changing.\nIt is the sum of the account's inbound and outbound flow rates."},static_balance:{type:"string",description:"The balance of the stream account at the latest CRUD timestamp."},buffer_balance:{type:"string",title:"reserved balance of the stream account\nIf the netflow rate is negative, the reserved balance is `netflow_rate * reserve_time`"},lock_balance:{type:"string",title:"the locked balance of the stream account after it puts a new object and before the object is sealed"},status:{title:"the status of the stream account",type:"string",enum:["STREAM_ACCOUNT_STATUS_ACTIVE","STREAM_ACCOUNT_STATUS_FROZEN"],default:"STREAM_ACCOUNT_STATUS_ACTIVE",description:"- STREAM_ACCOUNT_STATUS_ACTIVE: STREAM_ACCOUNT_STATUS_ACTIVE defines the active status of a stream account.\n - STREAM_ACCOUNT_STATUS_FROZEN: STREAM_ACCOUNT_STATUS_FROZEN defines the frozen status of a stream account.\nA frozen stream account cannot be used as payment address for buckets.\nIt can be unfrozen by depositing more BNB to the stream account."},settle_timestamp:{type:"string",format:"int64",title:"the unix timestamp when the stream account will be settled"},out_flows:{type:"array",items:{type:"object",properties:{to_address:{type:"string",title:"stream account address who receives the flow, usually SP(service provider)"},rate:{type:"string",title:"flow rate"}},title:"OutFlow defines the accumulative outflow stream rate in BNB\nfrom a stream account to a Storage Provider"},title:"the accumulated outflow rates of the stream account"}},title:"Stream Payment Record of a stream account"},current_timestamp:{type:"string",format:"int64"}}}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string"},value:{type:"string",format:"byte"}}}}}}}}}},parameters:[{name:"account",in:"path",required:!0,schema:{type:"string"}}],tags:["Query"],description:"Queries a list of DynamicBalance items.",method:"get",path:"/greenfield/payment/dynamic_balance/{account}",info:{title:"Greenfield - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"Queries a list of DynamicBalance items.",description:{type:"text/plain"},url:{path:["greenfield","payment","dynamic_balance",":account"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) ",type:"text/plain"},type:"any",value:"",key:"account"}]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/greenfield-api/greenfield-grpc-gateway-docs",custom_edit_url:null},sidebar:"openApiSidebar",previous:{title:"Query Auto Settle Record Items",permalink:"/bnbgreenfield-docs/docs/greenfield-api/auto-settle-record-all"},next:{title:"GetPaymentAccountsByOwner",permalink:"/bnbgreenfield-docs/docs/greenfield-api/get-payment-accounts-by-owner"}},f={},h=[{value:"DynamicBalance",id:"dynamicbalance",level:2}],g={toc:h};function T(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,s.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"dynamicbalance"},"DynamicBalance"),(0,n.kt)("p",null,"Queries a list of DynamicBalance items."),(0,n.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,n.kt)("summary",{style:{}},(0,n.kt)("strong",null,"Path Parameters")),(0,n.kt)("div",null,(0,n.kt)("ul",null,(0,n.kt)(c.Z,{className:"paramsItem",param:{name:"account",in:"path",required:!0,schema:{type:"string"}},mdxType:"ParamsItem"})))),(0,n.kt)("div",null,(0,n.kt)(i.Z,{mdxType:"ApiTabs"},(0,n.kt)(d.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,n.kt)("div",null,(0,n.kt)("p",null,"A successful response.")),(0,n.kt)("div",null,(0,n.kt)(r.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,n.kt)(d.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,n.kt)(m.Z,{mdxType:"SchemaTabs"},(0,n.kt)(d.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,n.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,n.kt)("summary",{style:{textAlign:"left"}},(0,n.kt)("strong",null,"Schema")),(0,n.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,n.kt)("ul",{style:{marginLeft:"1rem"}},(0,n.kt)(o.Z,{collapsible:!1,name:"dynamic_balance",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,n.kt)("details",{style:{}},(0,n.kt)("summary",{style:{}},(0,n.kt)("strong",null,"stream_record"),(0,n.kt)("span",{style:{opacity:"0.6"}}," object")),(0,n.kt)("div",{style:{marginLeft:"1rem"}},(0,n.kt)(o.Z,{collapsible:!1,name:"account",required:!1,schemaName:"account address",qualifierMessage:void 0,schema:{type:"string",title:"account address"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"crud_timestamp",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64",title:"latest update timestamp of the stream record"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"netflow_rate",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The per-second rate that an account's balance is changing.\nIt is the sum of the account's inbound and outbound flow rates."},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"static_balance",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The balance of the stream account at the latest CRUD timestamp."},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"buffer_balance",required:!1,schemaName:"reserved balance of the stream account\nIf the netflow rate is negative, the reserved balance is `netflow_rate * reserve_time`",qualifierMessage:void 0,schema:{type:"string",title:"reserved balance of the stream account\nIf the netflow rate is negative, the reserved balance is `netflow_rate * reserve_time`"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"lock_balance",required:!1,schemaName:"the locked balance of the stream account after it puts a new object and before the object is sealed",qualifierMessage:void 0,schema:{type:"string",title:"the locked balance of the stream account after it puts a new object and before the object is sealed"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"status",required:!1,schemaName:"the status of the stream account",qualifierMessage:"**Possible values:** [`STREAM_ACCOUNT_STATUS_ACTIVE`, `STREAM_ACCOUNT_STATUS_FROZEN`]",schema:{title:"the status of the stream account",type:"string",enum:["STREAM_ACCOUNT_STATUS_ACTIVE","STREAM_ACCOUNT_STATUS_FROZEN"],default:"STREAM_ACCOUNT_STATUS_ACTIVE",description:"- STREAM_ACCOUNT_STATUS_ACTIVE: STREAM_ACCOUNT_STATUS_ACTIVE defines the active status of a stream account.\n - STREAM_ACCOUNT_STATUS_FROZEN: STREAM_ACCOUNT_STATUS_FROZEN defines the frozen status of a stream account.\nA frozen stream account cannot be used as payment address for buckets.\nIt can be unfrozen by depositing more BNB to the stream account."},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"settle_timestamp",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64",title:"the unix timestamp when the stream account will be settled"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,n.kt)("details",{style:{}},(0,n.kt)("summary",{style:{}},(0,n.kt)("strong",null,"out_flows"),(0,n.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,n.kt)("div",{style:{marginLeft:"1rem"}},(0,n.kt)("li",null,(0,n.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,n.kt)(o.Z,{collapsible:!1,name:"to_address",required:!1,schemaName:"stream account address who receives the flow, usually SP(service provider)",qualifierMessage:void 0,schema:{type:"string",title:"stream account address who receives the flow, usually SP(service provider)"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"rate",required:!1,schemaName:"flow rate",qualifierMessage:void 0,schema:{type:"string",title:"flow rate"},mdxType:"SchemaItem"}),(0,n.kt)("li",null,(0,n.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,n.kt)(o.Z,{collapsible:!1,name:"current_timestamp",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"})))),(0,n.kt)(d.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,n.kt)(l.Z,{responseExample:'{\n  "dynamic_balance": "string",\n  "stream_record": {\n    "account": "string",\n    "crud_timestamp": "string",\n    "netflow_rate": "string",\n    "static_balance": "string",\n    "buffer_balance": "string",\n    "lock_balance": "string",\n    "status": "STREAM_ACCOUNT_STATUS_ACTIVE",\n    "settle_timestamp": "string",\n    "out_flows": [\n      {\n        "to_address": "string",\n        "rate": "string"\n      }\n    ]\n  },\n  "current_timestamp": "string"\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,n.kt)(d.Z,{label:"default",value:"default",mdxType:"TabItem"},(0,n.kt)("div",null,(0,n.kt)("p",null,"An unexpected error response.")),(0,n.kt)("div",null,(0,n.kt)(r.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,n.kt)(d.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,n.kt)(m.Z,{mdxType:"SchemaTabs"},(0,n.kt)(d.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,n.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,n.kt)("summary",{style:{textAlign:"left"}},(0,n.kt)("strong",null,"Schema")),(0,n.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,n.kt)("ul",{style:{marginLeft:"1rem"}},(0,n.kt)(o.Z,{collapsible:!1,name:"error",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"code",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"message",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,n.kt)("details",{style:{}},(0,n.kt)("summary",{style:{}},(0,n.kt)("strong",null,"details"),(0,n.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,n.kt)("div",{style:{marginLeft:"1rem"}},(0,n.kt)("li",null,(0,n.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,n.kt)(o.Z,{collapsible:!1,name:"type_url",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,n.kt)(o.Z,{collapsible:!1,name:"value",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,n.kt)("li",null,(0,n.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,n.kt)(d.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,n.kt)(l.Z,{responseExample:'{\n  "error": "string",\n  "code": 0,\n  "message": "string",\n  "details": [\n    {\n      "type_url": "string",\n      "value": "string"\n    }\n  ]\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}T.isMDXComponent=!0}}]);